#!/bin/bash

PRUNE_FLAG=off
BRANCH_TO_MERGE=""
DESTINATION_BRANCH=""

if [ "$1" = "--no-prune" ]; then
	PRUNE_FLAG=on
	BRANCH_TO_MERGE="$2"
	DESTINATION_BRANCH="$3"
else
	BRANCH_TO_MERGE="$1"
	DESTINATION_BRANCH="$2"
fi

CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"

unstash_changes() {
	if [ "$STASH_OUTPUT" != "No local changes to save" ]; then
		echo "Attempting to unstash local changes"
		POP_STASH="$(git stash pop)"
		if [ $? != 0 ]; then
			echo "ERROR:"
			echo "$POP_STASH"
			exit 9
		fi
	fi
} 


restore_original_state() {
	echo "Attempting to return to branch $CURRENT_BRANCH"
	CLEAR_INDEX="$(git reset --hard HEAD)"
	if [ $? != 0 ]; then
		echo "ERROR:"
		echo "$CLEAR_INDEX"
	fi
	CHECKOUT_ORIGINAL_OUTPUT="$(git checkout -q $CURRENT_BRANCH)"
	if [ $? != 0 ]; then
		echo "ERROR:"
		echo "$CHECKOUT_ORIGINAL_OUTPUT"
	      	exit 8
	fi
	unstash_changes
}

run_command()
{
	echo "RUNNING COMMAND: " $1
	output=$(eval $1 2>&1)
	if [ $? != 0 ]; then
		printf "ERROR: %s\n" "$output"
		return 1
	else
		printf "OUTPUT: %s\n" "$output"
		return 0
	fi
}

echo "Attempting to securely merge branch 'origin/$BRANCH_TO_MERGE' into 'origin/$DESTINATION_BRANCH'"

echo "Stashing any local changes and checking out remote branch 'origin/$DESTINATION_BRANCH'"
STASH_OUTPUT="$(git stash save)" || exit 1; 
run_command "git fetch -q --prune" || { unstash_changes && exit 2; }
run_command "git checkout -q --detach origin/$DESTINATION_BRANCH" || { unstash_changes && exit 3; }
echo "Attempting to merge"
MERGE_MESSAGE="\"Merge remote-tracking branch 'origin/$BRANCH_TO_MERGE' into $DESTINATION_BRANCH\""
run_command "git merge -S --no-ff -m $MERGE_MESSAGE origin/$BRANCH_TO_MERGE" || { restore_original_state && exit 4; }
echo "Merge Successful!"

echo "Attempting to push to remote repository 'origin'"
run_command "git push -q origin HEAD:$DESTINATION_BRANCH" || { restore_original_state && exit 5; }
echo "Push Successful!"


if [ "$PRUNE_FLAG" = off ]; then
	run_command "git push -q origin :$BRANCH_TO_MERGE" || { restore_original_state && exit 6; }
	run_command "git branch -d $BRANCH_TO_MERGE" || { restore_original_state && exit 7; }
fi

restore_original_state

exit 0
