#!/bin/bash

PRERELEASE_TAG=$1
TARGET_BRANCH=$2

INDEX=`expr index "$PRERELEASE_TAG" -`
RELEASE_TAG=${PRERELEASE_TAG:0:INDEX-1}

CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"

STASH_OUTPUT=''

function unstash_changes() {
	if [ "$STASH_OUTPUT" != "No local changes to save" ]; then
		POP_STASH="$(git stash pop)"
		if [ $? != 0 ]; then
			echo "ERROR:"
			echo "$POP_STASH"
			exit 9
		fi
	fi
}

function restore_original_state()
{
	CLEAR_INDEX="$(git reset --hard HEAD)"
	if [ $? != 0 ]; then
		echo "ERROR:"
		echo "$CLEAR_INDEX"
	fi
	CHECKOUT_ORIGINAL_OUTPUT="$(git checkout -q $CURRENT_BRANCH)"
	if [ $? != 0 ]; then
		echo "ERROR:"
		echo "$CHECKOUT_ORIGINAL_OUTPUT"
		exit 8
	fi
	unstash_changes
}

STASH_OUTPUT="$(git stash save)"
if [ $? != 0 ]; then
	echo "ERROR:"
	echo "$STASH_OUTPUT"
	exit 1
fi

FETCH_OUTPUT="$(git fetch -q --tags)"
if [ $? != 0 ]; then
	echo "ERROR:"
	echo "$FETCH_OUTPUT"
	unstash_changes
	exit 2
fi

CHECKOUT_OUTPUT="$(git checkout -q $TARGET_BRANCH)"
if [ $? != 0 ]; then
	echo "ERROR:"
	echo "Your target branch does not appear to exist"
	unstash_changes
	exit 3
fi

FF_MASTER_OUTPUT="$(git merge -q --ff-only origin/$TARGET_BRANCH)"
if [ $? != 0 ]; then
	echo "ERROR:"
	echo "$FF_MASTER_OUTPUT"
	restore_original_state
	exit 4
fi

MERGE_OUTPUT="$(git merge -q -S --no-ff $PRERELEASE_TAG)"
if [ $? != 0 ]; then
	echo "ERROR:"
	echo "$MERGE_OUTPUT"
	restore_original_state
	exit 5
fi

TAG_OUTPUT="$(git tag -s $RELEASE_TAG -m $RELEASE_TAG)"
if [ $? != 0 ]; then
	echo "ERROR:"
	echo "$TAG_OUTPUT"
	restore_original_state
	exit 6
fi

PUSH_OUTPUT="$(git push -q origin $TARGET_BRANCH --tags)"
if [ $? != 0 ]; then
	echo "ERROR:"
	echo "TAG_OUTPUT"
	restore_original_state
	exit 7
fi

restore_original_state

exit 0
